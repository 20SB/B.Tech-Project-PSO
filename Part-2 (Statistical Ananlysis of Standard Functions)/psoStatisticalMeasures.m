clc                                                                         % To clear the command window
clear                                                                       % To clear the workspace
close all

%% PROBLEM SETTING
lb = [0 0 0 0 0 0];                                                     % Lower Bound
ub = [10 10 10 10 10 10];                                                       % Upper Bound
prob = @spheref;                                                              % Fitness Function

%% ALGORITHM PARAMETERS
Np = 10;                                                                    % Population size
T = 50;                                                                     % No. of Iterations
w = 0.8;                                                                    % Inertia weight
c1 = 1.5;                                                                   % Acceleration Coefficient 1
c2 = 1.5;                                                                   % Acceleration Coefficient 2

Nruns = 10;
BestSol = NaN(Nruns,length(lb));
BestFitness = NaN(Nruns,1);
BestFitIter = NaN(Nruns,T+1);

for i = 1:Nruns
    rng(i,'twister')                             % For controlling random numbers generated by rand, randi
    [BestSol(i,:),BestFitness(i),BestFitIter(i,:),P,f] = PSOf(prob,lb,ub,Np,T,w,c1,c2);
    plot(BestFitIter(i,:),'*')
    hold on
end
xlabel('Itertion')
ylabel('Best fitness Function Value')
 

[a,ind] = min(BestFitness);
b = max(BestFitness);
c = mean(BestFitness);
d = median(BestFitness);
e = std(BestFitness);

colnames = {'min' 'max' 'mean' 'maedian' 'std'};
Statistical_Values = table(a, b, c, d, e, 'VariableNames', colnames)

Best_Soln = BestSol(ind,:)
BestSol

figure
plot(mean(BestFitIter),'*');
xlabel('Itertion')
ylabel('Average of best fitness Function Value')